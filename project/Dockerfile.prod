# Production Next.js Dockerfile for Ubuntu
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json package-lock.json* ./
RUN npm ci --only=production

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build the application
RUN npm run build

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Install curl for health checks
RUN apk add --no-cache curl

# Create a non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Create necessary directories with proper permissions
RUN mkdir -p ./public/uploads ./.next

# Set the correct permission for prerender cache and uploads directory
RUN chown -R nextjs:nodejs .next ./public
RUN chmod -R 755 ./public

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy public directory for static files (including uploaded images)
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Copy SQLite database if it exists
COPY --chown=nextjs:nodejs webhook_data.db* ./

# Ensure uploads directory has proper permissions
RUN chown -R nextjs:nodejs ./public/uploads
RUN chmod -R 755 ./public/uploads

# Ensure database file has proper permissions
RUN chown nextjs:nodejs webhook_data.db* 2>/dev/null || true
RUN chmod 664 webhook_data.db* 2>/dev/null || true

# Switch to nextjs user for runtime
USER nextjs

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Start the application
CMD ["node", "server.js"]
