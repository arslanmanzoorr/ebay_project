version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=auctionflow_dev
      - POSTGRES_USER=auctionuser
      - POSTGRES_PASSWORD=dev_password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./postgres-init/init-database.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auctionuser -d auctionflow_dev"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend (Development with PostgreSQL)
  frontend:
    build:
      context: ./project
      dockerfile: Dockerfile.prod
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3000/api
      - POSTGRES_DB=auctionflow_dev
      - POSTGRES_USER=auctionuser
      - POSTGRES_PASSWORD=dev_password
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    volumes:
      - ./project/public/uploads:/app/public/uploads
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Development - HTTP only)
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/logs:/var/log/nginx
      - ./project/public/uploads:/var/www/uploads
    depends_on:
      - frontend
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_dev_data:
    driver: local

networks:
  app-network:
    driver: bridge
